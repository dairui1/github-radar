// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  githubUrl   String   @unique
  owner       String
  repo        String
  isActive    Boolean  @default(true)
  lastSyncAt  DateTime?
  aiProvider  String   @default("openai")
  aiModel     String   @default("gpt-4o-mini")
  reportConfig String?  // JSON string for report configuration
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  reports   Report[]
  rawData   RawData[]
  stats     ProjectStats[]
  
  @@map("projects")
}

model Report {
  id               String      @id @default(cuid())
  projectId        String
  title            String
  content          String
  summary          String
  reportType       ReportType  @default(DAILY)
  detailLevel      String      @default("detailed") // "summary" or "detailed"
  reportDate       DateTime
  issuesCount      Int         @default(0)
  discussionsCount Int         @default(0)
  pullRequestsCount Int        @default(0)
  metadata         String?     // JSON string for additional metadata
  highlights       String?     // JSON string for key highlights
  metrics          String?     // JSON string for computed metrics
  createdAt        DateTime    @default(now())
  
  project          Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@map("reports")
}

model RawData {
  id        String    @id @default(cuid())
  projectId String
  type      DataType
  githubId  Int
  title     String
  body      String
  author    String
  url       String
  createdAt DateTime
  updatedAt DateTime?
  syncedAt  DateTime  @default(now())
  
  project   Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@unique([projectId, githubId, type])
  @@map("raw_data")
}

enum ReportType {
  DAILY
  WEEKLY
  MONTHLY
}

enum DataType {
  ISSUE
  DISCUSSION
  PULL_REQUEST
}

model Settings {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  encrypted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("settings")
}

model ProjectStats {
  id                  String   @id @default(cuid())
  projectId           String
  stars               Int
  forks               Int
  watchers            Int
  openIssues          Int
  size                Int
  defaultBranch       String
  language            String?
  languages           String   // JSON string
  contributorsCount   Int
  topContributors     String   // JSON string
  recentCommitsCount  Int
  lastCommitDate      DateTime?
  commitsLastWeek     Int      @default(0)
  issueEventsLastWeek Int      @default(0)
  uniqueAuthorsLastWeek Int    @default(0)
  createdAt           DateTime @default(now())
  
  project             Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@map("project_stats")
}